// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "todolist/domain"
import mock "github.com/stretchr/testify/mock"

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TaskUsecase) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, userID
func (_m *TaskUsecase) Fetch(ctx context.Context, userID uint64) ([]*domain.Task, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []*domain.Task); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TaskUsecase) GetByID(ctx context.Context, id uint64) (*domain.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, userID, t
func (_m *TaskUsecase) Store(ctx context.Context, userID uint64, t *domain.Task) error {
	ret := _m.Called(ctx, userID, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *domain.Task) error); ok {
		r0 = rf(ctx, userID, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, t
func (_m *TaskUsecase) Update(ctx context.Context, t *domain.Task) error {
	ret := _m.Called(ctx, t)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
